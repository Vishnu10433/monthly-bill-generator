from datetime import datetime, timedelta
from collections import defaultdict

def generate_monthly_bill(item_list: list, target_month: str) -> dict:
    # Parse target month start and end
    month_start = datetime.strptime(target_month + "-01", "%Y-%m-%d")
    next_month = (month_start.replace(day=28) + timedelta(days=4)).replace(day=1)
    month_end = next_month - timedelta(days=1)
    total_days_in_month = (month_end - month_start).days + 1

    groups = defaultdict(lambda: {"qty": 0, "amount": 0.0})
    
    for item in item_list:
        # Parse dates
        start = datetime.strptime(item["start_date"], "%Y-%m-%d")
        stop = datetime.strptime(item["stop_date"], "%Y-%m-%d")
        
        # Calculate overlap with the target month
        active_start = max(start, month_start)
        active_end = min(stop, month_end)
        active_days = (active_end - active_start).days + 1
        
        if active_days <= 0:
            continue  # Not active in target month

        # Parse and clean values
        rate = float(item["rate"])
        qty = int(item["qty"])
        
        # Daily rate per unit
        daily_rate_per_unit = rate / total_days_in_month
        amount = round(qty * daily_rate_per_unit * active_days, 2)

        billing_period = f"{active_start.date()} to {active_end.date()}"
        key = (item["item_code"], rate, billing_period)
        
        groups[key]["qty"] += qty
        groups[key]["amount"] += amount

    # Format output
    line_items = []
    total_revenue = 0.0

    for (item_code, rate, billing_period), data in groups.items():
        line_item = {
            "item_code": item_code,
            "rate": rate,
            "qty": data["qty"],
            "amount": round(data["amount"], 2),
            "billing_period": billing_period
        }
        total_revenue += data["amount"]
        line_items.append(line_item)

    return {
        "line_items": line_items,
        "total_revenue": round(total_revenue, 2)
    }
